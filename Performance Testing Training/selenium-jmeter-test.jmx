<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.6.3">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan">
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group">
        <intProp name="ThreadGroup.num_threads">10</intProp>
        <intProp name="ThreadGroup.ramp_time">2</intProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="OS Process Sampler" enabled="false">
          <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
          <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
          <stringProp name="SystemSampler.command">mvn</stringProp>
          <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">test</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="SystemSampler.directory">C:\Users\Kshitiz.manral\Desktop\Performance Testing Training\selenium-jmeter-test</stringProp>
        </SystemSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig guiclass="com.googlecode.jmeter.plugins.webdriver.config.gui.ChromeDriverConfigGui" testclass="com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig" testname="jp@gc - Chrome Driver Config">
          <boolProp name="WebDriverConfig.acceptinsecurecerts">false</boolProp>
          <boolProp name="WebDriverConfig.reset_per_iteration">true</boolProp>
          <stringProp name="WebDriverConfig.driver_path">C:\Users\Kshitiz.manral\Downloads\chromedriver-win64 (1)\chromedriver-win64\chromedriver.exe</stringProp>
          <boolProp name="WebDriverConfig.dev_mode">false</boolProp>
          <boolProp name="WebDriverConfig.headless">false</boolProp>
          <boolProp name="WebDriverConfig.maximize_browser">true</boolProp>
          <stringProp name="ChromeDriverConfig.additional_args"></stringProp>
          <stringProp name="ChromeDriverConfig.binary_path"></stringProp>
          <stringProp name="WebDriverConfig.proxy_type">SYSTEM</stringProp>
          <stringProp name="WebDriverConfig.proxy_pac_url"></stringProp>
          <stringProp name="WebDriverConfig.http_host"></stringProp>
          <intProp name="WebDriverConfig.http_port">8080</intProp>
          <boolProp name="WebDriverConfig.use_http_for_all_protocols">true</boolProp>
          <stringProp name="WebDriverConfig.https_host"></stringProp>
          <intProp name="WebDriverConfig.https_port">8080</intProp>
          <boolProp name="WebDriverConfig.use_ftp_proxy">true</boolProp>
          <stringProp name="WebDriverConfig.ftp_host"></stringProp>
          <intProp name="WebDriverConfig.ftp_port">8080</intProp>
          <boolProp name="WebDriverConfig.use_socks_proxy">true</boolProp>
          <stringProp name="WebDriverConfig.socks_host"></stringProp>
          <intProp name="WebDriverConfig.socks_port">8080</intProp>
          <stringProp name="WebDriverConfig.no_proxy">localhost</stringProp>
          <stringProp name="WebDriverConfig.custom_capabilites"></stringProp>
        </com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc - WebDriver Sampler">
          <stringProp name="WebDriverSampler.script">//WDS.sampleResult.sampleStart()
//
//try {
//    WDS.browser.get(&quot;https://petstore.octoperf.com/&quot;)
//
//    wait.until(ExpectedConditions.elementToBeClickable(By.partialLinkText(&quot;the Store&quot;))).click()
//
//    wait.until(ExpectedConditions.elementToBeClickable(By.id(&quot;SidebarContent&quot;))).findElement(By.cssSelector(&quot;a:nth-child(2)&quot;)).click()
//    
//    wait.until(ExpectedConditions.elementToBeClickable(By.className(&quot;product-item&quot;))).click()
//
//    wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&quot;a[href*=&apos;addItemToCart&apos;]&quot;))).click()
//
//    WDS.browser.findElement(By.id(&quot;Cart&quot;)).findElement(By.name(&quot;updateCartQuantities&quot;)).click()
//    
//    WDS.browser.findElement(By.xpath(&quot;//div[@id=&apos;QuickLinks&apos;]//a[1]&quot;)).click()
//
//    wait.until(ExpectedConditions.elementToBeClickable(By.name(&quot;FI-SW-02&quot;))).click()
//
//    wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&quot;#Catalog a:last-of-type&quot;))).click()
//
//    WDS.browser.findElement(By.id(&quot;Cart&quot;)).findElement(By.name(&quot;updateCartQuantities&quot;)).click()
//
//    WDS.browser.findElement(By.linkText(&quot;Proceed to Checkout&quot;)).click()
//
//    WDS.sampleResult.setSuccessful(true)
//    WDS.sampleResult.setResponseMessage(&quot;User journey executed successfully&quot;)
//    WDS.sampleResult.setResponseCode(&quot;200&quot;)
//} catch (Exception e) {
//    WDS.sampleResult.setSuccessful(false)
//    WDS.sampleResult.setResponseMessage(&quot;Test failed: &quot; + e.getMessage())
//    WDS.sampleResult.setResponseCode(&quot;500&quot;)
//} finally {
//    WDS.sampleResult.sampleEnd()
//}


//// WDS.sampleResult.sampleStart()
//
//
//import org.openqa.selenium.By
//import org.openqa.selenium.support.ui.ExpectedConditions
//import org.openqa.selenium.support.ui.WebDriverWait
//import java.time.Duration
//
//def wait = new WebDriverWait(WDS.browser, Duration.ofSeconds(10))
//
////WDS.sampleResult.sampleStart()
//
//try {
//    WDS.browser.get(&quot;https://petstore.octoperf.com/&quot;)
//
//    wait.until(ExpectedConditions.elementToBeClickable(By.partialLinkText(&quot;the Store&quot;))).click()
//
//    wait.until(ExpectedConditions.elementToBeClickable(By.id(&quot;SidebarContent&quot;))).findElement(By.cssSelector(&quot;a:nth-child(2)&quot;)).click()
//    
//    wait.until(ExpectedConditions.elementToBeClickable(By.className(&quot;product-item&quot;))).click()
//
//    wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&quot;a[href*=&apos;addItemToCart&apos;]&quot;))).click()
//
//    WDS.browser.findElement(By.id(&quot;Cart&quot;)).findElement(By.name(&quot;updateCartQuantities&quot;)).click()
//    
//    WDS.browser.findElement(By.xpath(&quot;//div[@id=&apos;QuickLinks&apos;]//a[1]&quot;)).click()
//
//    wait.until(ExpectedConditions.elementToBeClickable(By.name(&quot;FI-SW-02&quot;))).click()
//
//    wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&quot;#Catalog a:last-of-type&quot;))).click()
//
//    WDS.browser.findElement(By.id(&quot;Cart&quot;)).findElement(By.name(&quot;updateCartQuantities&quot;)).click()
//
//    WDS.browser.findElement(By.linkText(&quot;Proceed to Checkout&quot;)).click()
//
//    WDS.sampleResult.setSuccessful(true)
//    WDS.sampleResult.setResponseMessage(&quot;User journey executed successfully&quot;)
//    WDS.sampleResult.setResponseCode(&quot;200&quot;)
//} catch (Exception e) {
//    WDS.sampleResult.setSuccessful(false)
//    WDS.sampleResult.setResponseMessage(&quot;Test failed: &quot; + e.getMessage())
//    WDS.sampleResult.setResponseCode(&quot;500&quot;)
//} finally {
////    WDS.sampleResult.sampleEnd()
//}



//import org.openqa.selenium.By
//import org.openqa.selenium.support.ui.ExpectedConditions
//import org.openqa.selenium.support.ui.WebDriverWait
//import java.time.Duration
//
//def wait = new WebDriverWait(WDS.browser, Duration.ofSeconds(10))
//
//
//WDS.sampleResult.sampleStart()
//
//try {
//
//    WDS.browser.get(&quot;https://www.google.com&quot;)
//    Thread.sleep(2000)
//
//    WDS.browser.get(&quot;https://petstore.octoperf.com/&quot;)
//
//    wait.until(ExpectedConditions.elementToBeClickable(By.linkText(&quot;Enter the Store&quot;))).click()
//
//    wait.until(ExpectedConditions.elementToBeClickable(By.xpath(&quot;//div[@id=&apos;SidebarContent&apos;]/a[2]/img&quot;))).click()
//
//    wait.until(ExpectedConditions.elementToBeClickable(By.linkText(&quot;K9-BD-01&quot;))).click()
//
//    wait.until(ExpectedConditions.elementToBeClickable(By.linkText(&quot;Add to Cart&quot;))).click()
//
//    WDS.browser.findElement(By.name(&quot;updateCartQuantities&quot;)).click()
//
//    WDS.browser.findElement(By.xpath(&quot;//div[@id=&apos;QuickLinks&apos;]/a/img&quot;)).click()
//
//  
//    WDS.browser.findElement(By.linkText(&quot;FI-SW-02&quot;)).click()
//
// 
//    WDS.browser.findElement(By.linkText(&quot;Add to Cart&quot;)).click()
//
// 
//    WDS.browser.findElement(By.name(&quot;updateCartQuantities&quot;)).click()
//
// 
//    WDS.browser.findElement(By.linkText(&quot;Proceed to Checkout&quot;)).click()
//
//    WDS.sampleResult.setSuccessful(true)
//    WDS.sampleResult.setResponseMessage(&quot;User journey executed successfully&quot;)
//    WDS.sampleResult.setResponseCode(&quot;200&quot;)
//} catch (Exception e) {
//    WDS.sampleResult.setSuccessful(false)
//    WDS.sampleResult.setResponseMessage(&quot;Test failed: &quot; + e.getMessage())
//    WDS.sampleResult.setResponseCode(&quot;500&quot;)
//} finally {
//
//    WDS.sampleResult.sampleEnd()
//}

//WDS.browser.get(&quot;https://www.google.com&quot;);
//Thread.sleep(2000);
//WDS.browser.get(&quot;https://petstore.octoperf.com/&quot;);
//WDS.browser.findElement(org.openqa.selenium.By.linkText(&quot;Enter the Store&quot;)).click();
//WDS.browser.findElement(org.openqa.selenium.By.xpath(&quot;//div[@id=&apos;SidebarContent&apos;]/a[2]/img&quot;)).click();
//WDS.browser.findElement(org.openqa.selenium.By.linkText(&quot;K9-BD-01&quot;)).click();
//WDS.browser.findElement(org.openqa.selenium.By.linkText(&quot;Add to Cart&quot;)).click();
//WDS.browser.findElement(org.openqa.selenium.By.name(&quot;updateCartQuantities&quot;)).click();
//WDS.browser.findElement(org.openqa.selenium.By.xpath(&quot;//div[@id=&apos;QuickLinks&apos;]/a/img&quot;)).click();
//WDS.browser.findElement(org.openqa.selenium.By.linkText(&quot;FI-SW-02&quot;)).click();
//WDS.browser.findElement(org.openqa.selenium.By.linkText(&quot;Add to Cart&quot;)).click();
//WDS.browser.findElement(org.openqa.selenium.By.name(&quot;updateCartQuantities&quot;)).click();
//WDS.browser.findElement(org.openqa.selenium.By.linkText(&quot;Proceed to Checkout&quot;)).click();
//WDS.sampleResult.setSuccessful(true);
//WDS.sampleResult.setResponseMessage(&quot;Test executed successfully&quot;);
//WDS.sampleResult.setResponseCode(&quot;200&quot;);


//WDS.sampleResult.sampleStart()
//
//try {
//    WDS.browser.get(&quot;https://petstore.octoperf.com/&quot;)
//
//    wait.until(ExpectedConditions.elementToBeClickable(By.linkText(&quot;Enter the Store&quot;))).click()
//
//    wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&quot;a[href*=&apos;cat&apos;]&quot;))).click()
//
//    wait.until(ExpectedConditions.elementToBeClickable(By.linkText(&quot;FL-DSH-01&quot;))).click()
//
//    wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&quot;a.Button[href*=&apos;addItemToCart&apos;]&quot;))).click()
//
//    wait.until(ExpectedConditions.elementToBeClickable(By.xpath(&quot;//a[contains(text(), &apos;Proceed to Checkout&apos;)]&quot;))).click()
//
//    WDS.sampleResult.setSuccessful(true)
//    WDS.sampleResult.setResponseMessage(&quot;User journey buying a cat executed successfully&quot;)
//    WDS.sampleResult.setResponseCode(&quot;200&quot;)
//} catch (Exception e) {
//    WDS.sampleResult.setSuccessful(false)
//    WDS.sampleResult.setResponseMessage(&quot;Test failed: &quot; + e.getMessage())
//    WDS.sampleResult.setResponseCode(&quot;500&quot;)
//} finally {
//    WDS.sampleResult.sampleEnd()
//}


WDS.sampleResult.sampleStart()
WDS.browser.get(&quot;https://www.google.com&quot;);
Thread.sleep(2000);

WDS.browser.get(&quot;https://petstore.octoperf.com/&quot;)
WDS.browser.findElement(org.openqa.selenium.By.cssSelector(&quot;a.Button&quot;)).click()
WDS.browser.findElement(org.openqa.selenium.By.cssSelector(&quot;div#SidebarContent a:nth-child(2)&quot;)).click()
WDS.browser.findElement(org.openqa.selenium.By.className(&quot;product-item&quot;)).click()
WDS.browser.findElement(org.openqa.selenium.By.xpath(&quot;//a[contains(@href, &apos;addItemToCart&apos;)]&quot;)).click()
WDS.browser.findElement(org.openqa.selenium.By.id(&quot;Cart&quot;)).findElement(org.openqa.selenium.By.name(&quot;updateCartQuantities&quot;)).click()
WDS.browser.findElement(org.openqa.selenium.By.cssSelector(&quot;div#QuickLinks &gt; a&quot;)).click()
WDS.browser.findElement(org.openqa.selenium.By.name(&quot;FI-SW-02&quot;)).click()
WDS.browser.findElement(org.openqa.selenium.By.cssSelector(&quot;a[href*=&apos;addItemToCart&apos;]&quot;)).click()
WDS.browser.findElement(org.openqa.selenium.By.id(&quot;Cart&quot;)).findElement(org.openqa.selenium.By.name(&quot;updateCartQuantities&quot;)).click()
WDS.browser.findElement(org.openqa.selenium.By.linkText(&quot;Proceed to Checkout&quot;)).click()

WDS.sampleResult.setSuccessful(true)
WDS.sampleResult.setResponseMessage(&quot;Test executed successfully&quot;)
WDS.sampleResult.setResponseCode(&quot;200&quot;)

WDS.sampleResult.sampleEnd()


// WDS.sampleResult.sampleEnd()</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">java</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
